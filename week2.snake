import pandas as pd

# Load sample sheet information
sample_csv = pd.read_csv('sample_sheet.csv')
# Generate unique sample identifiers from the condition and replicate columns
SAMPLES = sample_csv['name'].tolist()



rule all:
    input:
        "results/multiqc_report.html"

rule bowtie2_align:
    input:
        fastq="samples/trimmed/full/{sample}_trimmed.fastq"
    output:
        bam="results/aligned/{sample}.bam"
    threads: 16
    conda:
        "envs/bowtie2_env.yml"
    shell:
        "bowtie2 -x results/bowtie2_index/genome -U {input.fastq} | samtools view -Sb - > {output.bam}"

rule samtools_sort:
    input:
        "results/aligned/{sample}.bam"
    output:
        "results/aligned/{sample}_sorted.bam"
    conda:
        "envs/samtools_env.yml"
    shell:
        "samtools sort {input} -o {output}"

rule samtools_index:
    input:
        "results/aligned/{sample}_sorted.bam"
    output:
        "results/aligned/{sample}_sorted.bam.bai"
    conda:
        "envs/samtools_env.yml"
    shell:
        "samtools index {input}"

rule samtools_flagstat:
    input:
        "results/aligned/{sample}_sorted.bam"
    output:
        "results/qc/{sample}_flagstat.txt"
    conda:
        "envs/samtools_env.yml"
    shell:
        "samtools flagstat {input} > {output}"

rule multiqc:
    input:
        expand("results/qc/{sample}_flagstat.txt", sample=SAMPLES)
    output:
        "results/qc/multiqc_report.html"
    conda:
        "envs/multiqc_env.yml"
    shell:
        "multiqc . --outdir results/qc"

rule bamCoverage:
    input:
        "results/aligned/{sample}_sorted.bam"
    output:
        "results/bigwig/{sample}.bw"
    conda:
        "envs/deeptools_env.yml"
    shell:
        "bamCoverage -b {input} -o {output} --normalizeUsing RPKM"

rule multiBwSummary:
    input:
        expand("results/bigwig/{sample}.bw", sample=SAMPLES)
    output:
        "results/analysis/multiBigwigSummary.npz"
    conda:
        "envs/deeptools_env.yml"
    shell:
        "multiBigwigSummary bins -b {input} -o {output}"

rule plotCorrelation:
    input:
        "results/analysis/multiBigwigSummary.npz"
    output:
        "results/analysis/plotCorrelation_heatmap.png"
    conda:
        "envs/deeptools_env.yml"
    shell:
        "plotCorrelation -in {input} --corMethod pearson --whatToPlot heatmap --colorMap RdYlBu --plotNumbers -o {output}"
