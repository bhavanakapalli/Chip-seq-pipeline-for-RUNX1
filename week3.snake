CON = ['INP', 'RUNX1']
REP = ['rep1', 'rep2']

rule all:
    input:
        "results/reproducible_peaks_annotated.txt",
        "results/motifs/"

rule make_tag_dir:
	input:
		bam = "results/aligned/{condition}_{rep}.sorted.bam",
	output:
		directory("results/{condition}_{rep}_HOMER/")
	conda:
		"envs/homer_env.yml"
	shell:
		"makeTagDirectory {output} {input.bam}"

rule findPeaks:
    input:
        rep1 = 'results/INP_{rep}_HOMER/',
        rep2 = 'results/RUNX1_{rep}_HOMER/'
    output:
        "results/{rep}_peaks.txt"
    conda:
        "envs/homer_env.yml"
    shell:
        "findPeaks {input.rep1} {input.rep2} -style factor -o {output}"

rule convertPeakFiles:
    input:
        "results/{rep}_peaks.txt"
    output:
        "results/{rep}_peaks.bed"
    conda:
        "envs/homer_env.yml"
    shell:
        "pos2bed.pl {input} > {output}"

rule intersect_peaks:
	input:
		bed1 = "results/rep1_peaks.bed",
		bed2 = "results/rep2_peaks.bed"
	output:
		"results/reproducible_peaks.bed"
	conda:
		"envs/bedtools_env.yml"
	shell:
		"""
		bedtools intersect -a {input.bed1} -b {input.bed2} > {output}
		"""

rule filter_blacklist:
    input:
        intersect="results/reproducible_peaks.bed",
        blacklist="results/hg38-blacklist.v2.bed"
    output:
        "results/reproducible_peaks_filtered.bed"
    conda:
        "envs/bedtools_env.yml"
    shell:
        "bedtools subtract -a {input.intersect} -b {input.blacklist} > {output}"

rule unzip_gtf:
	input:
		'results/gencode.v45.primary_assembly.annotation.gtf.gz'
	output:
		'results/gencode.v45.primary_assembly.annotation.gtf'
	shell:
		'''
		gunzip {input}
		'''

rule annotate_peaks:
	input:
		bf = 'results/reproducible_peaks_filtered.bed',
		gtf = 'results/gencode.v45.primary_assembly.annotation.gtf'
	output:
		'results/reproducible_peaks_annotated.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		annotatePeaks.pl {input.bf} hg38 -gtf {input.gtf}  > {output}
		'''

rule unzip_genome:
	input:
		'results/GRCh38.primary_assembly.genome.fa.gz'
	output:
		'results/GRCh38.primary_assembly.genome.fa'
	shell:
		'''
		gunzip {input}
		'''

rule findMotifs:
    input:
        bf = 'results/reproducible_peaks_filtered.bed',
        fasta = 'results/GRCh38.primary_assembly.genome.fa'
    output:
        directory("results/motifs/")
    conda:
        "envs/homer_env.yml"
    shell:
        '''
        findMotifsGenome.pl {input.bf} {input.fasta} {output}
        '''

