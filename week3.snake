<<<<<<< HEAD
CON = ['INP', 'RUNX1']
REP = ['rep1', 'rep2']

rule all:
    input:
        "results/reproducible_peaks_annotated.txt",
        "results/motifs/"

rule make_tag_dir:
	input:
		bam = "results/aligned/{condition}_{rep}.sorted.bam",
	output:
		directory("results/{condition}_{rep}_HOMER/")
	conda:
		"envs/homer_env.yml"
	shell:
		"makeTagDirectory {output} {input.bam}"

rule findPeaks:
    input:
        rep1 = 'results/INP_{rep}_HOMER/',
        rep2 = 'results/RUNX1_{rep}_HOMER/'
    output:
        "results/{rep}_peaks.txt"
    conda:
        "envs/homer_env.yml"
    shell:
        "findPeaks {input.rep1} {input.rep2} -style factor -o {output}"

rule convertPeakFiles:
    input:
        "results/{rep}_peaks.txt"
    output:
        "results/{rep}_peaks.bed"
    conda:
        "envs/homer_env.yml"
    shell:
        "pos2bed.pl {input} > {output}"

rule intersect_peaks:
	input:
		bed1 = "results/rep1_peaks.bed",
		bed2 = "results/rep2_peaks.bed"
	output:
		"results/reproducible_peaks.bed"
	conda:
		"envs/bedtools_env.yml"
	shell:
		"""
		bedtools intersect -a {input.bed1} -b {input.bed2} > {output}
		"""

rule filter_blacklist:
    input:
        intersect="results/reproducible_peaks.bed",
        blacklist="results/hg38-blacklist.v2.bed"
    output:
        "results/reproducible_peaks_filtered.bed"
    conda:
        "envs/bedtools_env.yml"
    shell:
        "bedtools subtract -a {input.intersect} -b {input.blacklist} > {output}"

rule unzip_gtf:
	input:
		'results/gencode.v45.primary_assembly.annotation.gtf.gz'
	output:
		'results/gencode.v45.primary_assembly.annotation.gtf'
	shell:
		'''
		gunzip {input}
		'''

rule annotate_peaks:
	input:
		bf = 'results/reproducible_peaks_filtered.bed',
		gtf = 'results/gencode.v45.primary_assembly.annotation.gtf'
	output:
		'results/reproducible_peaks_annotated.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		annotatePeaks.pl {input.bf} hg38 -gtf {input.gtf}  > {output}
		'''

rule unzip_genome:
	input:
		'results/GRCh38.primary_assembly.genome.fa.gz'
	output:
		'results/GRCh38.primary_assembly.genome.fa'
	shell:
		'''
		gunzip {input}
		'''

rule findMotifs:
    input:
        bf = 'results/reproducible_peaks_filtered.bed',
        fasta = 'results/GRCh38.primary_assembly.genome.fa'
    output:
        directory("results/motifs/")
    conda:
        "envs/homer_env.yml"
    shell:
        '''
        findMotifsGenome.pl {input.bf} {input.fasta} {output}
        '''

=======
import pandas as pd

# Load sample sheet information
sample_csv = pd.read_csv('sample_sheet.csv')
# Generate unique sample identifiers from the condition and replicate columns
SAMPLES = sample_csv['name'].tolist()

rule all:
    input:
        expand('results/tag_dirs/{condition}_{rep}', condition=CONDITIONS, rep=REPS),
        expand('results/peaks/{condition}_{rep}.peaks.txt', condition=CONDITIONS, rep=REPS),
        expand('results/peaks/{condition}_{rep}.peaks.bed', condition=CONDITIONS, rep=REPS),
        'results/reproducible_peaks.bed',
        'results/filtered_peaks.bed',
        'results/annotated_peaks.txt',
        'results/motifs.html'

rule make_tag_dir:
    input:
        'results/bams/{condition}_{rep}.sorted.bam'
    output:
        directory("results/tag_dirs/{condition}_{rep}")
    params:
        genome='results/genome.fa'
    conda:
        'envs/homer_env.yml'
    shell:
        'makeTagDirectory {input} {output} -genome {params.genome}'

rule findPeaks:
    input:
        tag_dir='results/tag_dirs/{condition}_{rep}'
    output:
        'results/peaks/{condition}_{rep}.peaks.txt'
    conda:
        'envs/homer_env.yml'
    shell:
        'findPeaks {input.tag_dir} -style factor -o {output}'

rule convertPeakFiles:
    input:
        'results/peaks/{condition}_{rep}.peaks.txt'
    output:
        'results/peaks/{condition}_{rep}.peaks.bed'
    conda:
        'envs/homer_env.yml'
    shell:
        'pos2bed.pl {input} > {output}'

rule intersect_peaks:
    input:
        peak_files=expand('results/peaks/{condition}_{rep}.peaks.bed', condition=CONDITIONS, rep=REPS)
    output:
        'results/reproducible_peaks.bed'
    conda:
        'envs/bedtools_env.yml'
    shell:
        'bedtools intersect -a {input.peak_files[0]} -b {input.peak_files[1]} | sort -u > {output}'

rule filter_blacklist:
    input:
        peaks='results/reproducible_peaks.bed',
        blacklist='results/hg38-blacklist.v2.bed'
    output:
        'results/filtered_peaks.bed'
    conda:
        'envs/bedtools_env.yml'
    shell:
        'bedtools intersect -v -a {input.peaks} -b {input.blacklist} > {output}'

rule unzip_gtf:
    input:
        'results/gencode.v45.primary_assembly.annotation.gtf.gz'
    output:
        'results/gencode.annotation.gtf'
    shell:
        'gunzip -c {input} > {output}'

rule annotate_peaks:
    input:
        peaks='results/filtered_peaks.bed',
        gtf='results/gencode.annotation.gtf'
    output:
        'results/annotated_peaks.txt'
    conda:
        'envs/homer_env.yml'
    shell:
        'annotatePeaks.pl {input.peaks} {params.genome} -gtf {input.gtf} > {output}'

rule unzip_genome:
    input:
        'results/GRCh38.primary_assembly.genome.fa.gz'
    output:
        'results/genome.fa'
    shell:
        'gunzip -c {input} > {output}'

rule motifs:
    input:
        peaks='results/filtered_peaks.bed',
        genome='results/genome.fa'
    output:
        'results/motifs.html'
    conda:
        'envs/homer_env.yml'
    shell:
        'findMotifsGenome.pl {input.peaks} {params.genome} -fasta {input.genome} -size 200 -len 8,10,12 -p 8 > {output}'
>>>>>>> 3a896e229fc4d9aace052b80f31c27bb961659dd
